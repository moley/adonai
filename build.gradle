plugins {
    id 'org.openjfx.javafxplugin' version '0.0.6'
}

version = '0.0.2'

ext.installpath = rootProject.file('build/installpath')
println System.getenv("JAVA_HOME")


apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'application'


repositories {
    mavenLocal()
    mavenCentral()
}

ext.lombokVersion = '1.18.22'

dependencies {

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'

    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

    implementation 'org.codehaus.guessencoding:guessencoding:1.4'

    implementation 'org.apache.poi:poi:4.1.1'//word/ppt export / import
    implementation 'org.apache.poi:poi-ooxml:4.1.1'//word/ppt export
    implementation 'org.apache.poi:poi-scratchpad:4.1.1'  //word/ppt export
    implementation 'com.lowagie:itext:2.1.3'  //pdf export
    implementation 'com.googlecode.soundlibs:jlayer:1.0.1.4'
    implementation 'com.mpatric:mp3agic:0.8.4'
    implementation 'org.jfxtras:jfxtras-menu:8.0-r5'
    implementation 'org.jsoup:jsoup:1.10.3' //html import
    implementation 'javax.activation:activation:1.1'
    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'com.atlassian.commonmark:commonmark:0.16.1'

    implementation 'org.kordamp.ikonli:ikonli-javafx:11.5.0'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:11.5.0'
    implementation 'org.controlsfx:controlsfx:11.0.0'

    implementation 'com.dropbox.core:dropbox-core-sdk:3.1.1'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.bitbucket.cowwoc:diff-match-patch:1.2'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.5'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'org.reflections:reflections:0.10.2'

    testImplementation 'com.google.guava:guava:28.2-jre'
    testImplementation 'org.testfx:testfx-junit:4.0.15-alpha'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.12.4'


    runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat 'full'
        showStackTraces = true
        showStandardStreams = false
    }

    systemProperty "file.encoding", "UTF-8"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

check.dependsOn jacocoTestReport

println "Using gradle version: " + gradle.gradleVersion
println "Using java version  : " + System.getProperty("java.version")


task importProdData(type: Copy) {
    from System.getProperty("user.home") + '/.adonai'
    into file('.adonai')
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:unchecked']
}

task createTestdata(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'org.adonai.testdata.TestDataCreator'
}


distZip.archiveFileName = 'adonai.zip'

task installLocal() {
    group = 'distribution'
    description = 'Installs the program into my output dir'
    File outputDir = new File(System.getProperty("user.home") + "/programs/adonai")
    File adonaiZip = distZip.archiveFile.get().asFile



    doFirst {
        println "Install AdonaiZip $adonaiZip.absolutePath into $outputDir.absolutePath"
        delete(outputDir)
    }

    doLast {
        copy {
            from zipTree(adonaiZip)
            into outputDir.parentFile
            eachFile { println it }
        }
    }

}
tasks.installLocal.dependsOn tasks.distZip

javafx {
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing', 'javafx.media']
    version = "11.0.2" //12-ea+8"
}

mainClassName = 'org.adonai.app.Main'



def applicationName = 'adonai'

task copyRealData(type: Copy) {
    from(System.getProperty("user.home") + "/.adonai")
    include 'tenant*/**'
    into file('.adonai')
}

/**xjcGenerate {
    source = fileTree('src/main/schema') { include 'zef2005.xsd' }
    outputDirectory = file ('src/xjc')
}**/

sourceSets {
    main {
        java {
            srcDirs 'src/xjc'
        }
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}








