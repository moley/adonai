buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "gradle.plugin.com.github.breadmoirai:github-release:2.2.9"
  }
}

allprojects {
  version = '0.0.2'



}

//ext.installpath = file(System.getProperty("user.home") + "/programs"))
ext.installpath = rootProject.file('build/installpath')
println System.getenv("JAVA_HOME")

apply plugin : "com.github.breadmoirai.github-release"

subprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'

  repositories {
    mavenLocal()
    mavenCentral()
  }

  ext.lombokVersion = '1.18.6'

  dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:3.2.4'
    annotationProcessor(group: 'org.pf4j', name: 'pf4j', version: "${pf4jVersion}")

    testCompile project(':testutils')

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  }

  compileJava.options.encoding = 'UTF-8'
  compileTestJava.options.encoding = 'UTF-8'

  sourceCompatibility = JavaVersion.VERSION_13
  targetCompatibility = JavaVersion.VERSION_13

  test {
    testLogging {
      events "passed", "skipped", "failed"
      exceptionFormat 'full'
      showStackTraces = true
      showStandardStreams = true
    }

    systemProperty "file.encoding", "UTF-8"
  }

  jacocoTestReport {
    reports {
      xml.enabled = true
      html.enabled = true
    }
  }

  check.dependsOn jacocoTestReport
}
// plugin location
ext.pluginsDir = rootProject.buildDir.path + '/plugins'

def allPlugins = fileTree('plugins').matching {
  include "**/build/libs/plugin*.zip"
  include "**/build/libs/*.jar"
}

def apiJars = fileTree('api').matching {
  include "**/build/libs/*.jar"
}

def appJars = fileTree('app').matching {
  include "**/build/libs/*.jar"
}

githubRelease {
  token System.getProperty ('github.password', '')
  owner System.getProperty ('github.username', '')
  repo "adonai_plugin"
  releaseAssets allPlugins + apiJars + appJars
}

tasks.githubRelease.dependsOn rootProject.getTasksByName('build', true)

println "Using gradle version: " + gradle.gradleVersion
println "Using java version  : " + System.getProperty("java.version")


task clean {
  doLast {
    project.file('build').deleteDir()
  }
}

task importProdData (type: Copy) {
  from System.getProperty("user.home") + '/.adonai'
  into project (':app').file('.adonai')
}

task installLocal() {
  group = 'distribution'
  description = 'Installs the program into my output dir'
  File outputDir = new File (System.getProperty("user.home") + "/programs/adonai")
  File adonaiZip = project(':app').file("build/distributions/adonai.zip")

  println "OutputDir = $outputDir.absolutePath"

  doFirst {
    delete(outputDir)
  }

  doLast {
    copy {
      from zipTree(adonaiZip)
      into outputDir.parentFile
      eachFile {println it}
    }
  }

}
tasks.installLocal.dependsOn project(':app').tasks.distZip






