plugins {
    id 'org.unbroken-dome.xjc' version '1.4.3'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'application'

}

javafx {
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing', 'javafx.media']
    version = "11.0.2" //12-ea+8"
}

dependencies {
    compile project(':shared')
    compile group: 'org.pf4j', name: 'pf4j', version: "${pf4jVersion}"
    compile 'org.pf4j:pf4j-update:2.2.0'

    compile 'org.apache.poi:poi:4.1.1'//word/ppt export / import
    compile 'org.apache.poi:poi-ooxml:4.1.1'//word/ppt export
    compile 'org.apache.poi:poi-scratchpad:4.1.1'  //word/ppt export
    compile 'com.lowagie:itext:2.1.3'  //pdf export
    compile 'com.googlecode.soundlibs:jlayer:1.0.1.4'
    compile 'com.mpatric:mp3agic:0.8.4'
    compile 'org.jfxtras:jfxtras-menu:8.0-r5'
    compile 'org.jsoup:jsoup:1.10.3' //html import
    compile 'javax.xml.bind:jaxb-api:2.3.0'
    compile 'javax.activation:activation:1.1'
    compile 'com.dropbox.core:dropbox-core-sdk:3.1.1'
    compile 'com.sun.mail:javax.mail:1.6.2'

    compile 'org.kordamp.ikonli:ikonli-javafx:11.3.4'
    compile 'org.kordamp.ikonli:ikonli-fontawesome-pack:11.3.4'
    compile 'org.controlsfx:controlsfx:11.0.0'


    compile 'commons-io:commons-io:2.6'

    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

    compile 'org.bitbucket.cowwoc:diff-match-patch:1.2'

    testCompile 'com.google.guava:guava:28.2-jre'

    compile 'com.sun.xml.bind:jaxb-impl:2.3.0'
    compile 'com.sun.xml.bind:jaxb-core:2.3.0'

}

mainClassName = 'org.adonai.ui.AdonaiApplication'


xjcGenerate {
    source = fileTree('src/main/schema') { include 'zef2005.xsd' }
    outputDirectory = file ('src/xjc')
}

sourceSets {
    main {
        java {
            srcDirs 'src/xjc'
        }
    }
}

//task copyRealData (type: Copy) {
//    from (System.getProperty("user.home") + "/.adonai")
//    include 'tenant*/**'
//    into file('.adonai')
//}
//tasks.compileJava.dependsOn(copyRealData)


task installLocal(type: Copy, dependsOn: distZip) {
    def zipFile = file("build/distributions/pluginApp-" + version + ".zip")
    def outputDir = file("build/local/programs")

    doLast {
        copy {
            from project.rootProject.file('.java-version')
            into new File (outputDir, "pluginApp-" + version + "/bin")
        }
    }
    //def outputDir = file(System.getProperty("user.home") + "/programs")
    println "OutputDir = $outputDir.absolutePath"

    from zipTree(zipFile)
    into outputDir
    group = 'distribution'
    description = 'Installs the program into my output dir'
}


